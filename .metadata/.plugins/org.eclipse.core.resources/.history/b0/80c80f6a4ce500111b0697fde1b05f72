/**
 * 
 */
package de.htwg_konstanz.in.copy;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InterruptedIOException;
import java.io.OutputStream;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.Date;
import java.util.zip.*;

/**
 * @author Ellen Wieland
 * 
 */
public class Client {

	SwitchableSocket switchableSocket;
	OutputStream out;
	InputStream in;
	boolean isSwitching = false;
	boolean hasSwitched = false;
	QueueString messageQueue = new QueueString();
	Date c;
	long chksum = 0;
	int alreadyTransferred;
	long fileSize;

	public Client() {
		try {
			switchableSocket = new SwitchableSocket(new Socket("localhost",
					8205));
			out = switchableSocket.getOutputStream();
			in = switchableSocket.getInputStream();
			alreadyTransferred = 0;
			fileSize = 0;
		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public int sendMessage(String message) throws SocketException, IOException {
		if (isSwitching) {
			messageQueue.put(message);
			return -1;
		} else if (!messageQueue.empty()) {
			messageQueue.put(message);
			c = new Date();
			System.out.println(c + ": ------ Anzahl: " + messageQueue.size()
					+ " Stored Messages available------");

			System.out.println(c + ": ______ " + messageQueue + " ______ ");
			for (NodeString t = messageQueue.head; t != null; t = t.next) {
				if (isSwitching) {
					// System.out.println(c+ " returning because of switching");
					return -2;
				}
				String m = messageQueue.get();
				out.write(m.getBytes(), 0, m.getBytes().length);
				out.flush();
				c = new Date();
				System.out.println(c + " Sent Stored Message: " + m);
				sameFromServer(message);
			}
			return 1;
		} else {
			try {
				out.write(message.getBytes(), 0, message.getBytes().length);
				out.flush();
				c = new Date();
				System.out.println(c + ": Sent: " + message);
				sameFromServer(message);
				return 0;
			} catch (IOException e) {
				e.printStackTrace();
				return -9;
			}
			// byte[] buffer = sameFromServer(message);
			// Receive the same string back from the server

		}
	}

	public boolean parseAndSendFile(String path) {
		try {
			File file = new File(path);
			if(chksum != 0){
				getTheChecksum(file);
				System.out.println("The Checksum is: " + chksum +"  !!!!");
			}			
			InputStream in = new FileInputStream(file);
			ZipInputStream zIn = new ZipInputStream(in);
			if(fileSize == 0){
				fileSize = file.length();
				System.out.println("fileSize: " + fileSize);
			}			
			byte[] buffer = new byte[512];
			int res;
		//	if(hasSwitched){
//			if(alreadyTransferred != 0){
//				curr = alreadyTransferred;
//			}
				in.skip(alreadyTransferred);
		//		hasSwitched = false;
				
		//	}
			while ((res = zIn.read(buffer, 0, 512)) != -1) {
				if(isSwitching){
					return false;
				}
				buffer = new byte[512];
				out.write(buffer);
				out.flush();
				alreadyTransferred += res;

			}
			
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		} catch (InterruptedIOException iee) {
			//if (hasSwitched) {
				alreadyTransferred = iee.bytesTransferred;
				System.err.println("alreadyTransferred: " + alreadyTransferred);
			//}else iee.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}
		if(fileSize == alreadyTransferred){
			System.out.println("All bytes from File has been transferred: " + fileSize);
			return true;
		}else return false;

	}

//	public int sendFile(File file) {
//		if (isSwitching) {
//			return -1;
//		} else {
//			try {
//				out.write(message.getBytes(), 0, message.getBytes().length);
//				out.flush();
//				c = new Date();
//				System.out.println(c + ": Sent: " + message);
//				sameFromServer(message);
//				return 0;
//			} catch (IOException e) {
//				e.printStackTrace();
//				return -9;
//			}
//			// byte[] buffer = sameFromServer(message);
//			// Receive the same string back from the server
//
//		}
//	}

	private long getTheChecksum(File file) throws IOException {
		InputStream in = new FileInputStream(file);
		Checksum checksum = new CRC32();
		CheckedInputStream chIn = new CheckedInputStream(in,checksum);
		while(chIn.read() != -1){
			//just go through the File to be able to create Checksum
		}
		long res = chIn.getChecksum().getValue();
		chIn.close();
		return res;
	}

	private byte[] sameFromServer(String message) throws IOException {
		byte[] buffer = new byte[message.getBytes().length];

		int totalBytesRcvd = 0; // Total bytes received so far
		int bytesRcvd; // Bytes received in last read
		while (totalBytesRcvd < message.getBytes().length) {
			if ((bytesRcvd = in.read(buffer, totalBytesRcvd,
					message.getBytes().length - totalBytesRcvd)) == -1) {
				c = new Date();
				throw new SocketException(c + ": Connection closed prematurely");
			}
			totalBytesRcvd += bytesRcvd;
		} // data array is full
		c = new Date();
		System.out.println(c + ": Received: " + new String(buffer));
		return buffer;

	}

	public SwitchableSocket getSocket() {
		return switchableSocket;
	}

}
